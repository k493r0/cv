name: Build and Release Latex PDF
on:
  push:
    branches: [ "main" ]
    paths:
      - '**.tex'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.tex'

jobs:
  gather-info:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
        tag: ${{ steps.set-tag-release.outputs.tag }}
        release_name: ${{ steps.set-tag-release.outputs.release_name }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d')"

      - name: Get release count for the day
        id: get-release-count
        run: |
          releases=$(gh release list --limit 100)
          count=$(echo "$releases" | grep -c "v${{ steps.date.outputs.date }}." || false)
          echo "::set-output name=count::$(($count))"

      - name: Set tag and release name
        id: set-tag-release
        run: |
          echo "::set-output name=tag::v${{ steps.date.outputs.date }}.${{ steps.get-release-count.outputs.count }}"
          echo "::set-output name=release_name::v${{ steps.date.outputs.date }}.${{ steps.get-release-count.outputs.count }}"

  build:
    runs-on: ubuntu-latest
    needs: [ gather-info ]
    strategy:
      matrix:
        include:
          - root_file: onepage/main.tex
            pdf_file: YukiK_onepage.pdf
          - root_file: twopage/main.tex
            pdf_file: YukiK_twopage.pdf

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Write commit hash to version file
        run: echo "$(git rev-parse --short HEAD) | ${{ needs.gather-info.outputs.tag }}" > version

      - name: Compile LaTeX document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ matrix.root_file }}
          args: -pdf -file-line-error -interaction=nonstopmode -f
        continue-on-error: true

      - name: Rename output PDF
        run: mv main.pdf ${{ matrix.pdf_file }}

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.pdf_file }}
          path: ${{ matrix.pdf_file }}

  release:
    needs: [ build, gather-info ]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Download PDFs
        uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          utcOffset: "+10:00"

      - name: Create GitHub Release
        id: create-release
        run: |
          set -x
          
          pdf_files=$(find . -type f -name '*.pdf')
          if [ -z "$pdf_files" ]; then
            echo "No PDF files found to upload."
            exit 0
          fi
          
          assets=($pdf_files)
          gh release create "${{ needs.gather-info.outputs.tag }}" "${assets[@]}" --notes "Updated on ${{ steps.current-time.outputs.time }}" --title "${{ needs.gather-info.outputs.release_name }}"